{"version":3,"file":"deep-merge-bundle.es.js","sources":["../node_modules/leapond-js-utils/src/index.js","../node_modules/leapond-deepcopy/src/index.js","../src/index.js"],"sourcesContent":["const toStr = Object.prototype.toString\nconst mergeTypes = {'[object Object]': 1, '[object Array]': 2, '[object Set]': 3, '[object Map]': 4}\n\nfunction getMergeType(target) {\n  return target &&\n      typeof target === 'object' &&\n      mergeTypes[toStr.call(target)] ||\n      0\n}\n\nexport {toStr, getMergeType}","import {getMergeType} from \"leapond-js-utils/src\";\n\n/**\n * Object, Array, Set, Map supported deep copy.\n * @param target\n * @param {number} [depthMax]\n * @return {Map<any, any>|Set<any>|*[]|*}\n */\nexport default function deepCopy(target, depthMax = Infinity) {\n  if (!target) return target\n  let args = arguments, typeTarget = args[2], depthCurrent = args[3] || 0, aLoops = args[4], dest, v\n  if (!(typeTarget > -1)) typeTarget = getMergeType(target)\n  if (!typeTarget || depthCurrent >= depthMax) return target\n\n  depthCurrent++\n\n  aLoops = aLoops ? [...aLoops, target] : [target]\n\n  switch (typeTarget) {\n    case 1:\n    case 2:\n      dest = typeTarget === 1 ? {} : []\n      Object.keys(target).forEach(k => {\n        v = target[k]\n        dest[k] = aLoops.includes(v) ? v : deepCopy(v, depthMax, -1, depthCurrent, aLoops)\n      })\n      return dest\n    case 3:\n      dest = new Set;\n      target.forEach(v => {\n        dest.add(deepCopy(v, depthMax, -1, depthCurrent, aLoops))\n      })\n      return dest\n    case 4:\n      dest = new Map;\n      target.forEach((v, k) => {\n        dest.set(k, deepCopy(v, depthMax, -1, depthCurrent, aLoops))\n      })\n      return dest\n  }\n  return target\n}","import deepCopy from \"leapond-deepcopy/src\";\nimport {getMergeType} from \"leapond-js-utils/src\";\n\n\nconst INNER_MARK = Symbol(''/*<DEV*/ + 'INNER'/*DEV>*/)\n/**\n * @property ARRAY_NORMAL - write by deepMerge\n * @property ARRAY_NORMAL_FIXED - existed item will be readonly, but can increase new item\n * @property ARRAY_CONCAT - concat to target array\n * @property ARRAY_CONCAT_UNIQ - concat to target array, but skip existed item\n * @property ARRAY_REPLACE - replace whole array\n * @property ARRAY_SEAL - fixed length\n * @property ARRAY_FREEZE - ignore source\n */\nconst arrayMergePolicies = {\n  ARRAY_NORMAL: 1,\n  ARRAY_NORMAL_FIXED: 1.1,\n  ARRAY_CONCAT: 2,\n  ARRAY_CONCAT_UNIQ: 2.1,\n  ARRAY_REPLACE: 3,\n  ARRAY_SEAL: 4,\n  ARRAY_FREEZE: 5\n}\nconst optionsDefault = {\n  [INNER_MARK]: 1,\n  clone: -Infinity,\n  unEnumerableInclude: false,\n  arrayPolicy: arrayMergePolicies.ARRAY_NORMAL,\n  // (a, b) => a.push(b) && a\n  arrayMerge: undefined,\n  deepMap: true\n}\n\n/**\n * @typedef mergeOptions\n * @property {boolean|number} [clone=-Infinity] - if clone target. <br/>> true for all, false for none, <br/>> number<0 for reuse depth, number>0 for clone depth\n * @property {boolean} [unEnumerableInclude=false] - if include keys not enumerable(and Symbol keys)\n * @property {arrayMergePolicies} [arrayPolicy=ARRAY_NORMAL] - array merge policy of build-in\n * @property {function} [arrayMerge] - custom array merger, (a, b) => result\n * @property {boolean} [deepMap=true] - if dig in Map items\n */\n\n/**\n * @param target\n * @param source\n * @param {mergeOptions} [options]\n * @return {*|{}|[]|[]}\n */\nfunction deepMerge(target, source, options) {\n  let isRoot = true, aLoops, depthCurrent = 0, typeTarget = getMergeType(target), typeSource = getMergeType(source)\n  // clone source while target type is not same with source\n  if (!typeTarget || typeTarget !== typeSource) return source\n  // detect root and merge options\n  if (options && options[INNER_MARK]) isRoot = false; else options = parseOptions(options)\n  // init loop circle and depth recorder\n  if (isRoot || arguments[4]) { // arguments[4] is passed by batch()\n    // create new loops\n    aLoops = [source]\n    depthCurrent = aLoops.depthCurrent = 1\n  } else {\n    // concat loops\n    const aLoopsPrev = arguments[3]\n    aLoops = [...aLoopsPrev, source]\n    // detect circled loops\n    if (aLoopsPrev.includes(source)) return source\n    // increase current depth\n    depthCurrent = aLoopsPrev.depthCurrent + 1\n  }\n  // clone source while target is empty\n  if (!target) return source\n\n  // store current depth on loops array property\n  aLoops.depthCurrent = depthCurrent\n\n  // clone target current level\n  if ((options.clone > 0 && depthCurrent <= options.clone) || (options.clone < 0 && depthCurrent > -options.clone)) target = deepCopy(target, 1)\n\n  switch (typeSource) {\n    case 1: // Object\n      let keys\n      if (options.unEnumerableInclude) keys = [...Object.getOwnPropertyNames(source), ...Object.getOwnPropertySymbols(source)]; else keys = Object.keys(source)\n      keys.forEach(key => {\n        target[key] = deepMerge(target[key], source[key], options, aLoops)\n      })\n      break\n    case 2: // Array\n      if (options.arrayMerge) return options.arrayMerge(target, source)\n\n      switch (options.arrayPolicy) {\n        case arrayMergePolicies.ARRAY_FREEZE:\n          return target\n        case arrayMergePolicies.ARRAY_SEAL:\n        case arrayMergePolicies.ARRAY_NORMAL:\n        case arrayMergePolicies.ARRAY_NORMAL_FIXED:\n          Object.keys(source).forEach(key => {\n            if (key in target) {\n              if (options.arrayPolicy === arrayMergePolicies.ARRAY_NORMAL_FIXED) return\n            } else if (options.arrayPolicy === arrayMergePolicies.ARRAY_SEAL) return\n\n            target[key] = deepMerge(target[key], source[key], options, aLoops)\n          })\n          break;\n        case arrayMergePolicies.ARRAY_REPLACE:\n          return source\n        case arrayMergePolicies.ARRAY_CONCAT:\n          source.forEach((v, i) => {\n            target.push(deepMerge(target[i], v, options, aLoops))\n          })\n          break\n        case arrayMergePolicies.ARRAY_CONCAT_UNIQ:\n          source.forEach((v, i) => {\n            !target.includes(v) && target.push(deepMerge(target[i], v, options, aLoops))\n          })\n      }\n      break\n    case 3:\n      source.forEach(v => target.add(v))\n      break\n    case 4:\n      source.forEach((v, k) => target.set(k, options.deepMap ? deepMerge(target.get(k), v, options, aLoops) : v))\n      break\n  }\n  return target\n}\n\n/**\n *\n * @param {Object[]} aTargets\n * @param {mergeOptions} [options]\n * @return {*}\n */\ndeepMerge.batch = function (aTargets, options) {\n  options = parseOptions(options)\n  return aTargets.reduce((a, b) => deepMerge(a, b, options, null, true))\n}\n\nfunction parseOptions(options) {\n  options = Object.assign({}, optionsDefault, options)\n  if (options.clone === true) options.clone = Infinity; else if (!(options.clone >= -Infinity)) options.clone = optionsDefault.clone\n  return options\n}\n\nObject.assign(deepMerge, arrayMergePolicies)\n\nexport default deepMerge"],"names":["const","let"],"mappings":"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"}